/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Jun 26, 2012, 3:04:38 PM
 */
package com.willwinder.universalgcodesender;

import gnu.io.CommPortIdentifier;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.lang.System;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
/**
 *
 * @author wwinder
 */
public class MainWindow extends javax.swing.JFrame 
implements SerialCommunicatorListener, KeyListener {

    int motorState = 0;
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        initProgram();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineBreakGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandTable = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        commPortComboBox = new javax.swing.JComboBox();
        baudrateSelectionComboBox = new javax.swing.JComboBox();
        opencloseButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        lineBreakRN = new javax.swing.JRadioButton();
        lineBreakN = new javax.swing.JRadioButton();
        lineBreakNR = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        scrollWindowCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        commandLabel = new javax.swing.JLabel();
        commandTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        fileLabel = new javax.swing.JLabel();
        overrideSpeedCheckBox = new javax.swing.JCheckBox();
        overrideSpeedValueSpinner = new javax.swing.JSpinner();
        sentRowsLabel = new javax.swing.JLabel();
        sentRowsValueLabel = new javax.swing.JLabel();
        rowsLabel = new javax.swing.JLabel();
        rowsValueLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        durationValueLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        stepSizeSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        xPlusButton = new javax.swing.JButton();
        xMinusButton = new javax.swing.JButton();
        yMinusButton = new javax.swing.JButton();
        zPlusButton = new javax.swing.JButton();
        zMinusButton = new javax.swing.JButton();
        yPlusButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        xLocationLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        zLocationLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        yLocationLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        gohomeBtn = new javax.swing.JButton();
        sethomeBtn = new javax.swing.JButton();
        btnSpin = new javax.swing.JButton();
        btnFHome = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(890, 470));

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane2.setViewportView(consoleTextArea);

        jTabbedPane2.addTab("Console", jScrollPane2);

        commandTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Command", "Sent", "Done", "Response"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        commandTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(commandTable);
        commandTable.getColumnModel().getColumn(0).setPreferredWidth(500);
        commandTable.getColumnModel().getColumn(1).setResizable(false);
        commandTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        commandTable.getColumnModel().getColumn(2).setResizable(false);
        commandTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        commandTable.getColumnModel().getColumn(3).setPreferredWidth(350);

        jTabbedPane2.addTab("Command Table", jScrollPane1);

        jTabbedPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel3.setMaximumSize(new java.awt.Dimension(325, 125));
        jPanel3.setMinimumSize(new java.awt.Dimension(325, 125));
        jPanel3.setName("Connection");

        baudrateSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2400", "4800", "9600", "19200", "38400", "57600", "115200" }));
        baudrateSelectionComboBox.setSelectedIndex(2);
        baudrateSelectionComboBox.setToolTipText("Select baudrate to use for the serial port.");
        baudrateSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baudrateSelectionComboBoxActionPerformed(evt);
            }
        });

        opencloseButton.setText("Open");
        opencloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opencloseButtonActionPerformed(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.gif"))); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        lineBreakGroup.add(lineBreakRN);
        lineBreakRN.setText("\\r\\n");
        lineBreakRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBreakRNActionPerformed(evt);
            }
        });

        lineBreakGroup.add(lineBreakN);
        lineBreakN.setText("\\n");
        lineBreakN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBreakNActionPerformed(evt);
            }
        });

        lineBreakGroup.add(lineBreakNR);
        lineBreakNR.setText("\\n\\r");
        lineBreakNR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBreakNRActionPerformed(evt);
            }
        });

        jLabel3.setText("Baud Rate:");

        jLabel5.setText("Line Terminator:");

        jLabel7.setText("Serial Port:");

        scrollWindowCheckBox.setSelected(true);
        scrollWindowCheckBox.setText("Scroll output window");
        scrollWindowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrollWindowCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(baudrateSelectionComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(lineBreakN)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lineBreakNR)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lineBreakRN))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(commPortComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(opencloseButton))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(scrollWindowCheckBox)))
                .addContainerGap(451, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(commPortComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(baudrateSelectionComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(4, 4, 4)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(lineBreakNR)
                            .add(lineBreakRN)
                            .add(lineBreakN))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(scrollWindowCheckBox))
                    .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(opencloseButton))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Connection", jPanel3);

        commandLabel.setText("Command");

        commandTextField.setEnabled(false);
        commandTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandTextFieldActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(commandLabel)
                        .add(0, 774, Short.MAX_VALUE))
                    .add(commandTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(commandLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(commandTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Command Mode", jPanel1);

        browseButton.setText("Browse");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        fileTextField.setEnabled(false);

        fileLabel.setText("File");

        overrideSpeedCheckBox.setText("Override speed");
        overrideSpeedCheckBox.setEnabled(false);

        overrideSpeedValueSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(60), Integer.valueOf(1), null, Integer.valueOf(1)));
        overrideSpeedValueSpinner.setEnabled(false);

        sentRowsLabel.setText("Sent rows:");

        sentRowsValueLabel.setText("0");

        rowsLabel.setText("Rows In File:");

        rowsValueLabel.setText("0");

        durationLabel.setText("Duration:");

        durationValueLabel.setText("00:00:00");

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(fileLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(browseButton))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(fileTextField)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(sendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(pauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(cancelButton)
                                        .add(18, 18, 18)
                                        .add(overrideSpeedValueSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(overrideSpeedCheckBox))
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(6, 6, 6)
                                        .add(rowsLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rowsValueLabel)
                                        .add(45, 45, 45)
                                        .add(sentRowsLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(sentRowsValueLabel)
                                        .add(44, 44, 44)
                                        .add(durationLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(durationValueLabel)))
                                .add(0, 401, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(fileLabel)
                    .add(browseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sendButton)
                    .add(pauseButton)
                    .add(overrideSpeedCheckBox)
                    .add(overrideSpeedValueSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton))
                .add(14, 14, 14)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(sentRowsLabel)
                        .add(sentRowsValueLabel))
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rowsLabel)
                        .add(rowsValueLabel))
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(durationValueLabel)
                        .add(durationLabel)))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("File Mode", jPanel2);

        stepSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        stepSizeSpinner.setEnabled(false);

        jLabel1.setText("Step size:");

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        xPlusButton.setText("X+");
        xPlusButton.setEnabled(false);
        xPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPlusButtonActionPerformed(evt);
            }
        });

        xMinusButton.setText("X-");
        xMinusButton.setEnabled(false);
        xMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xMinusButtonActionPerformed(evt);
            }
        });

        yMinusButton.setText("Y-");
        yMinusButton.setEnabled(false);
        yMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yMinusButtonActionPerformed(evt);
            }
        });

        zPlusButton.setText("Z+");
        zPlusButton.setEnabled(false);
        zPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zPlusButtonActionPerformed(evt);
            }
        });

        zMinusButton.setText("Z-");
        zMinusButton.setEnabled(false);
        zMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zMinusButtonActionPerformed(evt);
            }
        });

        yPlusButton.setText("Y+");
        yPlusButton.setEnabled(false);
        yPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yPlusButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(xMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(yMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(yPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(93, 93, 93)
                        .add(zMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(xPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(zPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(zPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(xPlusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(xMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(zMinusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        xLocationLabel.setText("0");

        jLabel2.setText("X:");

        jLabel8.setText("Manual Location:");

        jLabel6.setText("Z:");

        zLocationLabel.setText("0");

        jLabel4.setText("Y:");

        yLocationLabel.setText("0");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(yLocationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(xLocationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(zLocationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jLabel8))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(xLocationLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(yLocationLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(zLocationLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        gohomeBtn.setText("Go Home");
        gohomeBtn.setEnabled(false);
        gohomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gohomeBtnActionPerformed(evt);
            }
        });

        sethomeBtn.setText("Set Home");
        sethomeBtn.setEnabled(false);
        sethomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sethomeBtnActionPerformed(evt);
            }
        });

        btnSpin.setText("Spindle ON");
        btnSpin.setEnabled(false);
        btnSpin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpinActionPerformed(evt);
            }
        });

        btnFHome.setText("Find Home");
        btnFHome.setEnabled(false);
        btnFHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFHomeActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnSpin, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .add(gohomeBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(sethomeBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnFHome, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(sethomeBtn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnSpin)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(gohomeBtn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnFHome)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stepSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(251, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(stepSizeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(0, 24, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Manual Control", jPanel4);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane2)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 223, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** End of generated code.
     */
    
    /** Generated callback functions, hand coded.
     */
    private void scrollWindowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrollWindowCheckBoxActionPerformed
        checkScrollWindow();
    }//GEN-LAST:event_scrollWindowCheckBoxActionPerformed

    // TODO: Find out how to make these key* functions actions like the above.
    @Override
    public void keyPressed(KeyEvent ke) {
        boolean pressed = false;
        
        if (ke.getKeyCode() == KeyEvent.VK_UP) {
            pressed = true;
            if (this.commandNum == 0 || this.commandList.isEmpty()) {
                java.awt.Toolkit.getDefaultToolkit().beep();
            } else if (this.commandNum == -1) {
                this.commandNum = this.commandList.size() -1;
            } else {
                this.commandNum--;
            }
        }
        else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
            pressed = true;
            if ((this.commandNum == -1) || this.commandNum == (this.commandList.size() -1)) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                return;
            } else {
                this.commandNum++;
            }
        }
        
        if (pressed && this.commandNum != -1) {
            String text = this.commandList.get(this.commandNum);
            this.commandTextField.setText(text);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
        // Don't care about this one...
    }
    
    @Override
    public void keyReleased(KeyEvent ke) {
        // Or this one...
    }
    
    private void opencloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opencloseButtonActionPerformed
        if( this.opencloseButton.getText().equalsIgnoreCase("open") ) {
            Boolean ret = openCommConnection();

            if (ret) {
                // Let the command field grab focus.
                commandTextField.grabFocus();
            }
        } else {
           closeCommConnection();
        }
    }//GEN-LAST:event_opencloseButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadPortSelector();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void lineBreakNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBreakNActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakNActionPerformed

    private void baudrateSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baudrateSelectionComboBoxActionPerformed
    }//GEN-LAST:event_baudrateSelectionComboBoxActionPerformed

    private void lineBreakNRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBreakNRActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakNRActionPerformed

    private void lineBreakRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBreakRNActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakRNActionPerformed

    private void btnFHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFHomeActionPerformed
        //FIND HOME using HOMING COMMAND
        sendFindHome();
    }//GEN-LAST:event_btnFHomeActionPerformed

    private void btnSpinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpinActionPerformed
        if (motorState == 1) {
            this.btnSpin.setText("Spindle ON");
            sendMot(0);
            motorState = 0;
        } else {
            this.btnSpin.setText("Spindle OFF");
            sendMot(1);
            motorState = 1;
        }
    }//GEN-LAST:event_btnSpinActionPerformed

    private void sethomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sethomeBtnActionPerformed
        sendSetHome();        // TODO add your handling code here:
    }//GEN-LAST:event_sethomeBtnActionPerformed

    private void gohomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gohomeBtnActionPerformed
        sendGoHome();        // TODO add your handling code here:
    }//GEN-LAST:event_gohomeBtnActionPerformed

    private void yPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yPlusButtonActionPerformed
        this.adjustManualLocation(0, this.getStepSize(), 0);
        this.sendManualCommand();
    }//GEN-LAST:event_yPlusButtonActionPerformed

    private void zMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zMinusButtonActionPerformed
        this.adjustManualLocation(0, 0, -1 * this.getStepSize());
        this.sendManualCommand();
    }//GEN-LAST:event_zMinusButtonActionPerformed

    private void zPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zPlusButtonActionPerformed
        this.adjustManualLocation(0, 0, this.getStepSize());
        this.sendManualCommand();
    }//GEN-LAST:event_zPlusButtonActionPerformed

    private void yMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yMinusButtonActionPerformed
        this.adjustManualLocation(0, -1 * this.getStepSize(), 0);
        this.sendManualCommand();
    }//GEN-LAST:event_yMinusButtonActionPerformed

    private void xMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xMinusButtonActionPerformed
        this.adjustManualLocation(-1 * this.getStepSize(), 0, 0);
        this.sendManualCommand();
    }//GEN-LAST:event_xMinusButtonActionPerformed

    private void xPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPlusButtonActionPerformed
        this.adjustManualLocation(this.getStepSize(), 0, 0);
        this.sendManualCommand();
    }//GEN-LAST:event_xPlusButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.commPort.cancelSend();

        this.updateControlsForSend(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // Note: Cannot cancel a send while paused because there are commands
        //       in the GRBL buffer which can't be un-sent.
        try {
            if (this.pauseButton.getText().equalsIgnoreCase("pause")) {
                this.commPort.pauseSend();
                this.pauseButton.setText("Resume");
                this.cancelButton.setEnabled(false);
            } else if (this.pauseButton.getText().equalsIgnoreCase("resume")) {
                this.commPort.resumeSend();
                this.pauseButton.setText("Pause");
                this.cancelButton.setEnabled(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
            this.displayErrorDialog("Error while trying to pause/resume");
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        ActionListener actionListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                java.awt.EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        durationValueLabel.setText(Utils.timeSince(startTime));
                    }
                });

            }
        };

        startTime = System.currentTimeMillis();
        if (timer != null) {
            timer.stop();
        }
        timer = new Timer(1000, actionListener);
        timer.start();

        try {
            // This will throw an exception and prevent that other stuff from
            // happening (clearing the table before its ready for clearing.
            this.commPort.isReadyToStreamFile();

            this.updateControlsForSend(true);
            this.commPort.streamFileToComm(this.gcodeFile);
        } catch (Exception e) {
            timer.stop();
            this.updateControlsForSend(false);
            e.printStackTrace();
            this.displayErrorDialog("Error while starting file stream: " + e.getMessage());
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                fileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
                gcodeFile = fileChooser.getSelectedFile();
                Integer numRows = Utils.processFile(gcodeFile);

                rowsValueLabel.setText(numRows.toString());

                // Reset labels
                this.durationValueLabel.setText("00:00:00");
                this.sentRowsValueLabel.setText("0");
                this.sentRows = 0;
            } catch (FileNotFoundException ex) {
                this.displayErrorDialog("Problem opening file: " + ex.getMessage());
            } catch (IOException e) {
                this.displayErrorDialog("Unknown IOException while processing file: " + e.getMessage());
            }
        } else {
            // Canceled file open.
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void commandTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandTextFieldActionPerformed
        final String str = this.commandTextField.getText().replaceAll("(\\r\\n|\\n\\r|\\r|\\n)", "");
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                commPort.queueStringForComm(str + "\n");
            }
        });
        this.commandTextField.setText("");
        this.commandList.add(str);
        this.commandNum = -1;
    }//GEN-LAST:event_commandTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
        
    private void initProgram() {
        this.loadPortSelector();
        this.checkScrollWindow();
        this.setTitle("Universal GcodeSender (Version 1.0.3 - ASTM)");
        
        // Hook the view up to the model
        this.commandList = new ArrayList<String>();
        this.commPort = new SerialCommunicator();
        
        // Setup file browser.
        this.fileChooser = new JFileChooser();
        this.fileChooser.setFileFilter(new GcodeFileTypeFilter());

        // Register listeners
        this.commPort.setFileStreamCompleteListener(this);
        this.commPort.setCommandQueuedListener(this);
        this.commPort.setCommandSentListener(this);
        this.commPort.setCommandCompleteListener(this);
        this.commPort.setCommandPreprocessorListener(this);
        this.commPort.setCommConsoleListener(this);
  
        
        // Command History
        this.commandTextField.addKeyListener(this);
        
        this.tableModel = (DefaultTableModel) this.commandTable.getModel();
        
        // Manual controls
        this.manualLocation = new Coordinate(0,0,0);
}

    private void updateControlsForComm(boolean isOpen) {

        this.commPortComboBox.setEnabled(!isOpen);
        this.baudrateSelectionComboBox.setEnabled(!isOpen);
        this.refreshButton.setEnabled(!isOpen);
        this.commandTextField.setEnabled(isOpen);

        if (isOpen) {
            this.opencloseButton.setText("Close");
        } else {
            this.opencloseButton.setText("Open");
        }
        
        this.updateFileControls(isOpen);
        this.updateManualControls(isOpen);
    }
    
    private void updateFileControls(boolean enabled) {
        this.sendButton.setEnabled(enabled);
        this.browseButton.setEnabled(enabled);
        this.overrideSpeedCheckBox.setEnabled(enabled);
        this.overrideSpeedValueSpinner.setEnabled(enabled);
        this.fileTextField.setEnabled(enabled);

        if (!enabled) {
            // These might be on, so make sure they're off.
            this.pauseButton.setEnabled(false);
            this.cancelButton.setEnabled(false);
        }
    }
    
    private int getStepSize() {
        return Integer.parseInt( this.stepSizeSpinner.getValue().toString() );
    }
    private void adjustManualLocation(int x, int y, int z) {
        this.manualLocation.setX( this.manualLocation.getX() + x );
        this.manualLocation.setY( this.manualLocation.getY() + y );
        this.manualLocation.setZ( this.manualLocation.getZ() + z );
    }
    
    private void sendManualCommand() {
        updateManualLabels(this.manualLocation);
        String command = "G0 X"+this.manualLocation.getX()+
                           " Y"+this.manualLocation.getY()+
                           " Z"+this.manualLocation.getZ();
        this.commPort.queueStringForComm(command + "\n");
    }
    
    private void sendSetHome() {
        //updateManualLabels(this.manualLocation);
        String command = "G92 X0 Y0 Z0";
        this.commPort.queueStringForComm(command + "\n");
        
        this.manualLocation.setX(0);
        this.manualLocation.setY(0);
        this.manualLocation.setZ(0);
        
        updateManualLabels(this.manualLocation);
    }
    
    private void sendGoHome() {
        String command = "G0 X0 Y0 Z0";
        this.commPort.queueStringForComm(command + "\n");
        
        sendSetHome();
    }
    
    private void sendFindHome() {
        String command = "G28 X0 Y0 Z0";
        this.commPort.queueStringForComm(command + "\n");
        
        sendSetHome();
    }
    private void sendMot(int state) {
        String command = "  ";
        
        if(state == 0)
            command = "M5";
        else
            command = "M3";
        
        this.commPort.queueStringForComm(command + "\n");
    }


    private void updateManualLabels(Coordinate coords) {
            this.xLocationLabel.setText(coords.getX()+"");
            this.yLocationLabel.setText(coords.getY()+"");
            this.zLocationLabel.setText(coords.getZ()+"");
    }
    
    private void updateManualControls(boolean enabled) {
        // Reset labels
        if (enabled) {
            this.manualLocation = new Coordinate(0,0,0);
            this.updateManualLabels(this.manualLocation);
        }
        
        this.xMinusButton.setEnabled(enabled);
        this.xPlusButton.setEnabled(enabled);
        this.yMinusButton.setEnabled(enabled);
        this.yPlusButton.setEnabled(enabled);
        this.zMinusButton.setEnabled(enabled);
        this.zPlusButton.setEnabled(enabled);
        this.stepSizeSpinner.setEnabled(enabled);
        this.sethomeBtn.setEnabled(enabled);
        this.gohomeBtn.setEnabled(enabled);
        this.btnSpin.setEnabled(enabled);
        this.btnFHome.setEnabled(enabled);
        
    }
    
    private void updateControlsForSend(boolean isSending) {
        // Command tab
        this.commandTextField.setEnabled(!isSending);
        // File tab
        this.sendButton.setEnabled(!isSending);
        this.pauseButton.setEnabled(isSending);
        this.overrideSpeedCheckBox.setEnabled(!isSending);
        this.overrideSpeedValueSpinner.setEnabled(!isSending);
        this.cancelButton.setEnabled(isSending);
        // Manual tab
        this.updateManualControls(!isSending);
    }
    
    // Scans for comm ports and puts them in the comm port combo box.
    private void loadPortSelector() {
        commPortComboBox.removeAllItems();
        
        List<CommPortIdentifier> portList = CommUtils.getSerialPortList();
        
        if (portList.size() < 1) {
            this.displayErrorDialog("No serial ports found.");
        } else {
            // Sort?
            //java.util.Collections.sort(portList);

            java.util.Iterator<CommPortIdentifier> portIter = portList.iterator();

            while ( portIter.hasNext() ) 
            {
                CommPortIdentifier portIdentifier = portIter.next();
                commPortComboBox.addItem(portIdentifier.getName());
            }
            
            commPortComboBox.setSelectedIndex(0);
        }
    }
    
    private void checkScrollWindow() {
        DefaultCaret caret = (DefaultCaret)consoleTextArea.getCaret();
        if (scrollWindowCheckBox.isSelected()) {
          caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
          consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
        } else {
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        }
    }
    
    private int getSpeedOverrideValue() {
        int ret = -1;
        if (this.overrideSpeedCheckBox.isSelected()) {
            ret = Integer.parseInt( this.overrideSpeedValueSpinner.getValue().toString() );
        }
        return ret;
    }
    
    private String getNewline() {
        if (lineBreakNR.isSelected())
            return "\n\r";
        else if (lineBreakRN.isSelected())
            return "\r\n";
        else if (lineBreakN.isSelected())
            return "\n";
        else
            return "wtfbbq";
    }

    private boolean openCommConnection() {
        boolean connected = false;
        try {
            this.clearTable();
            this.sentRowsValueLabel.setText("0");
            this.sentRows = 0;

            connected = commPort.openCommPort( commPortComboBox.getSelectedItem().toString(), 
                                                     Integer.parseInt( baudrateSelectionComboBox.getSelectedItem().toString() ) );
            this.updateControlsForComm(connected);
        } catch (Exception e) {
            this.displayErrorDialog("Error opening connection: "+e.getMessage());
        }
        return connected;
    }
    
    private void closeCommConnection() {
        this.commPort.closeCommPort();
        
        this.updateControlsForComm(false);

    }
    
    void clearTable() {
        while (this.tableModel.getRowCount()>0){
            this.tableModel.removeRow(0);
        }
    }
       
    private void scrollTable(int toRow) {
        // Scroll if selected.
        if (this.scrollWindowCheckBox.isSelected()) {
            if (this.commandTable.isVisible()) {
                this.commandTable.getSelectionModel().setSelectionInterval(toRow, toRow);
                this.commandTable.scrollRectToVisible(new Rectangle(this.commandTable.getCellRect(toRow, 0, true)));
            }
        }
        
    }
        
    private void displayErrorDialog(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /** SerialCommunicatorListener implementation.
     */
    
    @Override
    public void fileStreamComplete(String filename, boolean success) {
        // Stop the timer
        this.timer.stop();
        this.endTime = System.currentTimeMillis();
        
        this.updateControlsForSend(false);
        if (success) {
            JOptionPane.showMessageDialog(new JFrame(), "Job complete after "+this.durationValueLabel.getText(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            displayErrorDialog("Job completed with error.");
        }
    }
    
    @Override
    public void commandQueued(GcodeCommand command) {
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;

        this.tableModel.addRow(new Object[]{command.getCommandString(), command.isSent(), command.isDone(), command.getResponse()});
    }
     
    @Override
    public void commandSent(GcodeCommand command) {
        // Update # rows sent label
        this.sentRows++;
        
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;
        // TODO: If Preprocessor changes the command mark the cell somehow
        // command (in case of preprocessor change)
        //tableModel.setValueAt(command.getCommandString(), command.getCommandNumber(), 0);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                sentRowsValueLabel.setText(""+sentRows);
                        
                // sent
                tableModel.setValueAt(sentCommand.isSent(), row, 1);
                scrollTable(row);
            }});
    }
    
    @Override
    public void commandComplete(GcodeCommand command) {
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // done
                tableModel.setValueAt(sentCommand.isDone(), row, 2);

                // response
                tableModel.setValueAt(sentCommand.getResponse(), row, 3);

                scrollTable(row);
            }});
    }
    
    @Override
    public String preprocessCommand(String command) {
        Integer overrideSpeed = this.getSpeedOverrideValue();
        String newCommand = command;

        // Remove comments from command.
        newCommand = CommUtils.removeComments(newCommand);

        // Override feed speed
        if (overrideSpeed > 0) {
            newCommand = CommUtils.overrideSpeed(command, this.getSpeedOverrideValue());
        }
        
        // Return the post processed command.
        return newCommand;
    }

    @Override
    public void messageForConsole(String msg) {
        this.consoleTextArea.append(msg);
        
        if (this.consoleTextArea.isVisible() &&
                this.scrollWindowCheckBox.isEnabled()) {
            this.consoleTextArea.setCaretPosition(this.consoleTextArea.getDocument().getLength());
        }
    }
    
    // My Variables
    private javax.swing.JFileChooser fileChooser;
    private java.io.File gcodeFile;
    private SerialCommunicator commPort;
    private int commandNum = -1;
    private List<String> commandList;
    private DefaultTableModel tableModel;
    private int sentRows = 0;
    private Coordinate manualLocation;
    
    // Duration timer
    private Timer timer;
    private long startTime;
    private long endTime;
    
    // Generated variables.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox baudrateSelectionComboBox;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton btnFHome;
    private javax.swing.JButton btnSpin;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox commPortComboBox;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JTable commandTable;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationValueLabel;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JButton gohomeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.ButtonGroup lineBreakGroup;
    private javax.swing.JRadioButton lineBreakN;
    private javax.swing.JRadioButton lineBreakNR;
    private javax.swing.JRadioButton lineBreakRN;
    private javax.swing.JButton opencloseButton;
    private javax.swing.JCheckBox overrideSpeedCheckBox;
    private javax.swing.JSpinner overrideSpeedValueSpinner;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JLabel rowsValueLabel;
    private javax.swing.JCheckBox scrollWindowCheckBox;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel sentRowsLabel;
    private javax.swing.JLabel sentRowsValueLabel;
    private javax.swing.JButton sethomeBtn;
    private javax.swing.JSpinner stepSizeSpinner;
    private javax.swing.JLabel xLocationLabel;
    private javax.swing.JButton xMinusButton;
    private javax.swing.JButton xPlusButton;
    private javax.swing.JLabel yLocationLabel;
    private javax.swing.JButton yMinusButton;
    private javax.swing.JButton yPlusButton;
    private javax.swing.JLabel zLocationLabel;
    private javax.swing.JButton zMinusButton;
    private javax.swing.JButton zPlusButton;
    // End of variables declaration//GEN-END:variables
}
